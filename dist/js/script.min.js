function randomX(){return Math.abs(Math.floor(Math.random()*canvas1.width-50))}function randomY(){return Math.abs(Math.floor(Math.random()*canvas1.height-50))}function collision(s,e){mouse1.posX-s<=cheeseSmall.posX&&mouse1.posX+s>=cheeseSmall.posX&&mouse1.posY-e<=cheeseSmall.posY&&mouse1.posY+e>=cheeseSmall.posY&&alert("eat !")}var container=document.querySelector(".container"),canvas=function(s,e){this.width=s,this.height=e,this.create=function(){this.div=document.createElement("div"),this.div.style.width=this.width+"px",this.div.style.height=this.height+"px",this.div.classList.add("canvas"),container.appendChild(this.div)}},canvas1=new canvas(1200,500);canvas1.create();for(var cheese=function(s,e,t,i,h,o){this.width=s,this.height=e,this.posX=t,this.posY=i,this.size=h,this.addTime=o,this.create=function(){this.div=document.createElement("div"),this.div.classList.add("cheese"),this.div.style.width=this.width+"px",this.div.style.height=this.height+"px",this.div.style.top=this.posY+"px",this.div.style.left=this.posX+"px",container.querySelector(".canvas").appendChild(this.div)}},cheeses=[],i=0;i<3;i++){var cheeseSmall=new cheese(50,50,randomX(),randomY(),1,10);cheeseSmall.create(),cheeses.push(cheeseSmall)}var mouse=function(s,e,t,i,h){this.width=s,this.height=e,this.posX=t,this.posY=i,this.speed=h,this.direction=new Array,this.cross=new Array,this.point,this.isAlive=!0,this.div,this.create=function(){this.div=document.createElement("div"),this.div.classList.add("mouse","dirRight"),this.div.style.width=this.width+"px",this.div.style.height=this.height+"px",this.div.style.top=this.posY+"px",this.div.style.left=this.posX+"px",container.querySelector(".canvas").appendChild(this.div)},this.move=function(){var s=this;document.addEventListener("keydown",function(e){e.keyCode==s.cross[0]?(s.posY-=s.speed,s.div.className="mouse dirTop"):e.keyCode==s.cross[1]?(s.posX+=s.speed,s.div.className="mouse dirRight"):e.keyCode==s.cross[2]?(s.posY+=s.speed,s.div.className="mouse dirBottom"):e.keyCode==s.cross[3]&&(s.posX-=s.speed,s.div.className="mouse dirLeft"),s.div.style.left=s.posX+"px",s.div.style.top=s.posY+"px",collision(mouse1.width/2,mouse1.height/2)},!1)}},mouse1=new mouse(100,100,10,20,10);mouse1.cross=[38,39,40,37],mouse1.create(),mouse1.move();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
